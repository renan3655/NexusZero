# -*- coding: utf-8 -*-
"""
AN√ÅLISE DE JOGOS 0x0 EM TEMPO REAL - v2.2
Desenvolvido por: Renan Quintanilha Marques 
√öltima atualiza√ß√£o: 06/04/2025  
"""

import json
import re
from httpx import get, RequestError
from datetime import datetime, timedelta
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, Border, Side, PatternFill
from openpyxl.utils import get_column_letter
import sys
from telegram_notifier import enviar_notificacao  # Importa√ß√£o da nova fun√ß√£o
import time  # Para controle de intervalo de tempo

# ====================== CONFIGURA√á√ïES ======================
HEADER_COLOR = "2A629A"  # Azul mais moderno
FILE_NAME = "Relatorio_Jogos_0x0.xlsx"
MIN_MINUTES = 20  # Tempo m√≠nimo para an√°lise
MAX_MINUTES = 120  # Tempo m√°ximo considerado
SHOW_LIMIT = 10  # Quantidade de jogos exibidos no console

# Vari√°vel global para jogos j√° notificados
jogos_notificados = set()

# ====================== FUN√á√ïES PRINCIPAIS ======================
class AnalisadorJogos:
    @staticmethod
    def obter_dados():
        """Obt√©m dados com tratamento de erros refor√ßado"""
        try:
            print("üîç Conectando ao OneFootball...", end=" ", flush=True)
            response = get(
                'https://onefootball.com/pt-br/jogos?only_live=true',
                headers={
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64)',
                    'Accept-Language': 'pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7'
                },
                timeout=20
            )
            response.raise_for_status()

            if match := re.search(r'\{"props".+\}', response.text, re.DOTALL):
                print("‚úÖ Dados obtidos com sucesso!")
                return json.loads(match.group())
            
            print("‚ö†Ô∏è Estrutura do site alterada!")
            return None

        except RequestError as e:
            print(f"üî¥ Falha na conex√£o: {str(e)}")
            return None
        except Exception as e:
            print(f"‚ö†Ô∏è Erro inesperado: {type(e).__name__} - {str(e)}")
            return None

    @staticmethod
    def processar_tempo(tempo_str):
        """Processa o tempo com intelig√™ncia para acr√©scimos"""
        if not tempo_str or tempo_str.lower() in ['n√£o iniciado', 'intervalo']:
            return 0, tempo_str
        
        try:
            digitos = ''.join(c for c in tempo_str if c.isdigit())
            
            if len(digitos) > 2:  # Caso 90+2 (902)
                tempo_regulamentar = int(digitos[:2])
                acrescimos = int(digitos[2:])
                total = min(90 + acrescimos, MAX_MINUTES)
                return total, f"{tempo_regulamentar}+{acrescimos}'"
            
            minutos = int(digitos) if digitos else 0
            return min(minutos, MAX_MINUTES), f"{minutos}'"
            
        except ValueError:
            return 0, tempo_str

    @staticmethod
    def gerar_relatorio(jogos):
        """Cria relat√≥rio Excel profissional"""
        if not jogos:
            print("üì≠ Nenhum dado para gerar relat√≥rio")
            return False

        try:
            print("\nüìä Gerando relat√≥rio Excel...")
            wb = Workbook()
            planilha = wb.active
            planilha.title = "Jogos 0x0"
            
            # Estilos premium
            estilo_cabecalho = Font(bold=True, color="FFFFFF", size=11)
            preenchimento = PatternFill(
                start_color=HEADER_COLOR,
                end_color=HEADER_COLOR,
                fill_type="solid"
            )
            bordas = Border(
                left=Side(style='thin'),
                right=Side(style='thin'),
                top=Side(style='thin'),
                bottom=Side(style='thin')
            )
            
            # Cabe√ßalhos
            colunas = [
                'Competi√ß√£o', 'Time Casa', 'Placar Casa',
                'Time Visitante', 'Placar Visitante',
                'Tempo Jogo', 'Minutos', 'Status',
                'Data', 'Hora'
            ]
            planilha.append(colunas)
            
            # Dados
            for jogo in jogos:
                planilha.append([jogo[col] for col in colunas])
            
            # Formata√ß√£o autom√°tica
            for idx, coluna in enumerate(colunas, 1):
                letra = get_column_letter(idx)
                
                # Cabe√ßalho
                celula = planilha[f"{letra}1"]
                celula.font = estilo_cabecalho
                celula.fill = preenchimento
                celula.alignment = Alignment(horizontal='center')
                celula.border = bordas
                
                # Ajuste de largura
                planilha.column_dimensions[letra].width = max(len(coluna) + 2, 15)
                
                # Dados
                for linha in range(2, len(jogos) + 2):
                    celula = planilha[f"{letra}{linha}"]
                    celula.alignment = Alignment(horizontal='center')
                    celula.border = bordas
            
            planilha.freeze_panes = 'A2'
            planilha.auto_filter.ref = planilha.dimensions
            wb.save(FILE_NAME)
            
            print(f"üíæ Relat√≥rio salvo como '{FILE_NAME}'")
            return True
            
        except Exception as e:
            print(f"‚õî Falha ao gerar relat√≥rio: {type(e).__name__}")
            return False

# ====================== EXECU√á√ÉO ======================
if __name__ == "__main__":
    try:
        print(f"\n‚öΩ NEXUS ZERO - Desenvolvido por Renan Quintanilha Marques\n")
        
        # Loop cont√≠nuo para execu√ß√£o autom√°tica a cada 15 minutos
        while True:
            print("\nüîÑ Iniciando nova an√°lise...\n")
            
            # Coleta de dados
            dados = AnalisadorJogos.obter_dados()
            if not dados:
                print("‚ö†Ô∏è Dados n√£o obtidos, tentando novamente na pr√≥xima execu√ß√£o...")
                dados = {"props": {"pageProps": {"containers": []}}}  # Dados vazios para evitar falhas
            
            # Processamento
            jogos_validos = []
            for jogo in dados.get('props', {}).get('pageProps', {}).get('containers', []):
                try:
                    if cards := jogo.get('type', {}).get('fullWidth', {}).get('component', {}).get('contentType', {}).get('matchCardsList', {}):
                        for partida in cards.get('matchCards', []):
                            try:
                                # Extra√ß√£o segura
                                time_casa = partida['homeTeam']['name']
                                placar_casa = int(partida['homeTeam']['score'].split()[0]) if partida['homeTeam']['score'] else 0
                                time_fora = partida['awayTeam']['name']
                                placar_fora = int(partida['awayTeam']['score'].split()[0]) if partida['awayTeam']['score'] else 0
                                
                                minutos, tempo_formatado = AnalisadorJogos.processar_tempo(partida.get('timePeriod'))
                                
                                if placar_casa == 0 and placar_fora == 0 and 20 <= minutos <= 40:
                                    jogo = {
                                        'Competi√ß√£o': partida['trackingEvents'][0]['typedServerParameter']['competition']['value'],
                                        'Time Casa': time_casa,
                                        'Placar Casa': placar_casa,
                                        'Time Visitante': time_fora,
                                        'Placar Visitante': placar_fora,
                                        'Tempo Jogo': tempo_formatado,
                                        'Minutos': minutos,
                                        'Status': 'Em Andamento' if minutos > 0 else 'Pr√©-Jogo',
                                        'Data': datetime.now().strftime('%d/%m/%Y'),
                                        'Hora': datetime.now().strftime('%H:%M:%S')
                                    }
                                    jogos_validos.append(jogo)
                                    
                                    # ENVIA NOTIFICA√á√ÉO PARA O TELEGRAM
                                    if jogo['Time Casa'] + jogo['Time Visitante'] not in jogos_notificados:
                                        try:
                                            enviar_notificacao(
                                                time_casa=jogo['Time Casa'],
                                                time_fora=jogo['Time Visitante'],
                                                competicao=jogo['Competi√ß√£o'],
                                                tempo=jogo['Tempo Jogo']
                                            )
                                            # Marque o jogo como notificado
                                            jogos_notificados.add(jogo['Time Casa'] + jogo['Time Visitante'])
                                        except Exception as e:
                                            print(f"‚ö†Ô∏è Falha no Telegram: {e}")
                            except Exception:
                                continue
                except Exception:
                    continue
            
            # Resultados
            print(f"\nüìã Total de jogos v√°lidos: {len(jogos_validos)}")
            for i, jogo in enumerate(jogos_validos[:SHOW_LIMIT], 1):
                print(f"{i}. {jogo['Time Casa']} {jogo['Placar Casa']}√ó{jogo['Placar Visitante']} {jogo['Time Visitante']} | {jogo['Tempo Jogo']}")
                
            
                        # Relat√≥rio
            AnalisadorJogos.gerar_relatorio(jogos_validos)
            
            # Calcula o hor√°rio da pr√≥xima execu√ß√£o
            hora_atual = datetime.now()
            proxima_execucao = hora_atual + timedelta(minutes=15)
            print(f"\n‚è≥ Aguardando pr√≥xima execu√ß√£o √†s {proxima_execucao.strftime('%H:%M:%S')}... Pressione Ctrl+C para sair\n")
            
            # Aguarda 15 minutos antes de continuar o loop
            time.sleep(900)  # 15 minutos em segundos
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Monitoramento interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå ERRO: {type(e).__name__} - {str(e)}")

